{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AlpacaWebsocket = exports.ERROR = exports.CONN_ERROR = exports.EVENT = exports.STATE = void 0;\n\nconst events_1 = __importDefault(require(\"events\"));\n\nconst ws_1 = __importDefault(require(\"ws\"));\n\nconst msgpack5_1 = __importDefault(require(\"msgpack5\")); // Connection states. Each of these will also emit EVENT.STATE_CHANGE\n\n\nvar STATE;\n\n(function (STATE) {\n  STATE[\"AUTHENTICATING\"] = \"authenticating\";\n  STATE[\"AUTHENTICATED\"] = \"authenticated\";\n  STATE[\"CONNECTED\"] = \"connected\";\n  STATE[\"CONNECTING\"] = \"connecting\";\n  STATE[\"DISCONNECTED\"] = \"disconnected\";\n  STATE[\"WAITING_TO_CONNECT\"] = \"waiting to connect\";\n  STATE[\"WAITING_TO_RECONNECT\"] = \"waiting to reconnect\";\n})(STATE = exports.STATE || (exports.STATE = {})); // Client events\n\n\nvar EVENT;\n\n(function (EVENT) {\n  EVENT[\"CLIENT_ERROR\"] = \"client_error\";\n  EVENT[\"STATE_CHANGE\"] = \"state_change\";\n  EVENT[\"AUTHORIZED\"] = \"authorized\";\n  EVENT[\"UNAUTHORIZED\"] = \"unauthorized\";\n  EVENT[\"TRADES\"] = \"stock_trades\";\n  EVENT[\"QUOTES\"] = \"stock_quotes\";\n  EVENT[\"BARS\"] = \"stock_bars\";\n  EVENT[\"UPDATED_BARS\"] = \"stock_updated_bars\";\n  EVENT[\"DAILY_BARS\"] = \"stock_daily_bars\";\n  EVENT[\"TRADING_STATUSES\"] = \"trading_statuses\";\n  EVENT[\"LULDS\"] = \"lulds\";\n  EVENT[\"CANCEL_ERRORS\"] = \"cancel_errors\";\n  EVENT[\"CORRECTIONS\"] = \"corrections\";\n  EVENT[\"ORDERBOOKS\"] = \"orderbooks\";\n  EVENT[\"NEWS\"] = \"news\";\n})(EVENT = exports.EVENT || (exports.EVENT = {})); // Connection errors by code\n\n\nexports.CONN_ERROR = new Map([[400, \"invalid syntax\"], [401, \"not authenticated\"], [402, \"auth failed\"], [403, \"already authenticated\"], [404, \"auth timeout\"], [405, \"symbol limit exceeded\"], [406, \"connection limit exceeded\"], [407, \"slow client\"], [408, \"v2 not enabled\"], [409, \"insufficient subscription\"], [500, \"internal error\"]]); // Connection errors without code\n\nvar ERROR;\n\n(function (ERROR) {\n  ERROR[\"MISSING_SECERT_KEY\"] = \"missing secret key\";\n  ERROR[\"MISSING_API_KEY\"] = \"missing api key\";\n  ERROR[\"UNEXPECTED_MESSAGE\"] = \"unexpected message\";\n})(ERROR = exports.ERROR || (exports.ERROR = {}));\n\nclass AlpacaWebsocket extends events_1.default.EventEmitter {\n  constructor(options) {\n    super();\n    this.msgpack = (0, msgpack5_1.default)();\n    this.session = {\n      apiKey: options.apiKey,\n      secretKey: options.secretKey,\n      subscriptions: options.subscriptions,\n      reconnect: true,\n      verbose: options.verbose,\n      backoff: true,\n      reconnectTimeout: 0,\n      maxReconnectTimeout: 30,\n      backoffIncrement: 0.5,\n      url: options.url,\n      currentState: STATE.WAITING_TO_CONNECT,\n      isReconnected: false,\n      pongWait: 5000\n    };\n\n    if (this.session.apiKey.length === 0) {\n      throw new Error(ERROR.MISSING_API_KEY);\n    }\n\n    if (this.session.secretKey.length === 0) {\n      throw new Error(ERROR.MISSING_SECERT_KEY);\n    } // Register internal event handlers\n    // Log and emit every state change\n\n\n    Object.values(STATE).forEach(s => {\n      this.on(s, () => {\n        this.emit(EVENT.STATE_CHANGE, s);\n      });\n    });\n  }\n\n  connect() {\n    this.emit(STATE.CONNECTING);\n    this.session.currentState = STATE.CONNECTING;\n    this.resetSession();\n    this.conn = new ws_1.default(this.session.url, {\n      perMessageDeflate: {\n        serverNoContextTakeover: false,\n        clientNoContextTakeover: false\n      },\n      headers: {\n        \"Content-Type\": \"application/msgpack\"\n      }\n    });\n    this.conn.binaryType = \"nodebuffer\";\n    this.conn.once(\"open\", () => this.authenticate());\n    this.conn.on(\"message\", data => {\n      this.handleMessage(this.msgpack.decode(data));\n    });\n    this.conn.on(\"error\", err => {\n      this.emit(EVENT.CLIENT_ERROR, err.message);\n      this.disconnect();\n    });\n    this.conn.on(\"close\", (code, msg) => {\n      this.log(`connection closed with code: ${code} and message: ${msg}`);\n\n      if (this.session.reconnect) {\n        this.reconnect();\n      }\n    });\n    this.conn.on(\"pong\", () => {\n      if (this.session.pongTimeout) {\n        clearTimeout(this.session.pongTimeout);\n      }\n    });\n    this.session.pingInterval = setInterval(() => {\n      this.ping();\n    }, 10000);\n  }\n\n  onConnect(fn) {\n    this.on(STATE.AUTHENTICATED, () => {\n      if (this.session.isReconnected) {\n        //if reconnected the user should subscribe to its symbols again\n        this.subscribeAll();\n      } else {\n        fn();\n      }\n    });\n  }\n\n  reconnect() {\n    this.log(\"Reconnecting...\");\n    this.session.isReconnected = true;\n    const {\n      backoff,\n      backoffIncrement,\n      maxReconnectTimeout\n    } = this.session;\n    let reconnectTimeout = this.session.reconnectTimeout;\n\n    if (backoff) {\n      setTimeout(() => {\n        reconnectTimeout += backoffIncrement;\n\n        if (reconnectTimeout > maxReconnectTimeout) {\n          reconnectTimeout = maxReconnectTimeout;\n        }\n\n        this.connect();\n      }, reconnectTimeout * 1000);\n      this.emit(STATE.WAITING_TO_RECONNECT, reconnectTimeout);\n    }\n  }\n\n  ping() {\n    this.conn.ping();\n    this.session.pongTimeout = setTimeout(() => {\n      this.log(\"no pong received from server, terminating...\");\n      this.conn.terminate();\n    }, this.session.pongWait);\n  }\n\n  authenticate() {\n    const authMsg = {\n      action: \"auth\",\n      key: this.session.apiKey,\n      secret: this.session.secretKey\n    };\n    this.conn.send(this.msgpack.encode(authMsg));\n    this.emit(STATE.AUTHENTICATING);\n    this.session.currentState = STATE.AUTHENTICATING;\n  }\n\n  disconnect() {\n    this.emit(STATE.DISCONNECTED);\n    this.session.currentState = STATE.DISCONNECTED;\n    this.conn.close();\n    this.session.reconnect = false;\n\n    if (this.session.pongTimeout) {\n      clearTimeout(this.session.pongTimeout);\n    }\n\n    if (this.session.pingInterval) {\n      clearInterval(this.session.pingInterval);\n    }\n  }\n\n  onDisconnect(fn) {\n    this.on(STATE.DISCONNECTED, () => fn());\n  }\n\n  onError(fn) {\n    this.on(EVENT.CLIENT_ERROR, err => fn(err));\n  }\n\n  onStateChange(fn) {\n    this.on(EVENT.STATE_CHANGE, newState => fn(newState));\n  }\n\n  handleMessage(data) {\n    const msgType = (data === null || data === void 0 ? void 0 : data.length) ? data[0].T : \"\";\n\n    switch (msgType) {\n      case \"success\":\n        if (data[0].msg === \"connected\") {\n          this.emit(STATE.CONNECTED);\n          this.session.currentState = STATE.CONNECTED;\n        } else if (data[0].msg === \"authenticated\") {\n          this.emit(STATE.AUTHENTICATED);\n          this.session.currentState = STATE.AUTHENTICATED;\n        }\n\n        break;\n\n      case \"subscription\":\n        this.updateSubscriptions(data[0]);\n        break;\n\n      case \"error\":\n        this.emit(EVENT.CLIENT_ERROR, exports.CONN_ERROR.get(data[0].code));\n        break;\n\n      default:\n        this.dataHandler(data);\n    }\n  }\n\n  log(msg) {\n    if (this.session.verbose) {\n      // eslint-disable-next-line no-console\n      console.log(msg);\n    }\n  }\n\n  getSubscriptions() {\n    return this.session.subscriptions;\n  }\n\n  resetSession() {\n    this.session.reconnect = true;\n    this.session.backoff = true;\n    this.session.reconnectTimeout = 0;\n    this.session.maxReconnectTimeout = 30;\n    this.session.backoffIncrement = 0.5;\n\n    if (this.session.pongTimeout) {\n      clearTimeout(this.session.pongTimeout);\n    }\n\n    if (this.session.pingInterval) {\n      clearInterval(this.session.pingInterval);\n    }\n  }\n\n}\n\nexports.AlpacaWebsocket = AlpacaWebsocket;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","AlpacaWebsocket","ERROR","CONN_ERROR","EVENT","STATE","events_1","require","ws_1","msgpack5_1","Map","default","EventEmitter","constructor","options","msgpack","session","apiKey","secretKey","subscriptions","reconnect","verbose","backoff","reconnectTimeout","maxReconnectTimeout","backoffIncrement","url","currentState","WAITING_TO_CONNECT","isReconnected","pongWait","length","Error","MISSING_API_KEY","MISSING_SECERT_KEY","values","forEach","s","on","emit","STATE_CHANGE","connect","CONNECTING","resetSession","conn","perMessageDeflate","serverNoContextTakeover","clientNoContextTakeover","headers","binaryType","once","authenticate","data","handleMessage","decode","err","CLIENT_ERROR","message","disconnect","code","msg","log","pongTimeout","clearTimeout","pingInterval","setInterval","ping","onConnect","fn","AUTHENTICATED","subscribeAll","setTimeout","WAITING_TO_RECONNECT","terminate","authMsg","action","key","secret","send","encode","AUTHENTICATING","DISCONNECTED","close","clearInterval","onDisconnect","onError","onStateChange","newState","msgType","T","CONNECTED","updateSubscriptions","get","dataHandler","console","getSubscriptions"],"sources":["/Users/matthewbrown/Desktop/code/Summer/Stock-Portfolio/stock-portfolio/node_modules/@alpacahq/alpaca-trade-api/dist/resources/datav2/websocket.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AlpacaWebsocket = exports.ERROR = exports.CONN_ERROR = exports.EVENT = exports.STATE = void 0;\nconst events_1 = __importDefault(require(\"events\"));\nconst ws_1 = __importDefault(require(\"ws\"));\nconst msgpack5_1 = __importDefault(require(\"msgpack5\"));\n// Connection states. Each of these will also emit EVENT.STATE_CHANGE\nvar STATE;\n(function (STATE) {\n    STATE[\"AUTHENTICATING\"] = \"authenticating\";\n    STATE[\"AUTHENTICATED\"] = \"authenticated\";\n    STATE[\"CONNECTED\"] = \"connected\";\n    STATE[\"CONNECTING\"] = \"connecting\";\n    STATE[\"DISCONNECTED\"] = \"disconnected\";\n    STATE[\"WAITING_TO_CONNECT\"] = \"waiting to connect\";\n    STATE[\"WAITING_TO_RECONNECT\"] = \"waiting to reconnect\";\n})(STATE = exports.STATE || (exports.STATE = {}));\n// Client events\nvar EVENT;\n(function (EVENT) {\n    EVENT[\"CLIENT_ERROR\"] = \"client_error\";\n    EVENT[\"STATE_CHANGE\"] = \"state_change\";\n    EVENT[\"AUTHORIZED\"] = \"authorized\";\n    EVENT[\"UNAUTHORIZED\"] = \"unauthorized\";\n    EVENT[\"TRADES\"] = \"stock_trades\";\n    EVENT[\"QUOTES\"] = \"stock_quotes\";\n    EVENT[\"BARS\"] = \"stock_bars\";\n    EVENT[\"UPDATED_BARS\"] = \"stock_updated_bars\";\n    EVENT[\"DAILY_BARS\"] = \"stock_daily_bars\";\n    EVENT[\"TRADING_STATUSES\"] = \"trading_statuses\";\n    EVENT[\"LULDS\"] = \"lulds\";\n    EVENT[\"CANCEL_ERRORS\"] = \"cancel_errors\";\n    EVENT[\"CORRECTIONS\"] = \"corrections\";\n    EVENT[\"ORDERBOOKS\"] = \"orderbooks\";\n    EVENT[\"NEWS\"] = \"news\";\n})(EVENT = exports.EVENT || (exports.EVENT = {}));\n// Connection errors by code\nexports.CONN_ERROR = new Map([\n    [400, \"invalid syntax\"],\n    [401, \"not authenticated\"],\n    [402, \"auth failed\"],\n    [403, \"already authenticated\"],\n    [404, \"auth timeout\"],\n    [405, \"symbol limit exceeded\"],\n    [406, \"connection limit exceeded\"],\n    [407, \"slow client\"],\n    [408, \"v2 not enabled\"],\n    [409, \"insufficient subscription\"],\n    [500, \"internal error\"],\n]);\n// Connection errors without code\nvar ERROR;\n(function (ERROR) {\n    ERROR[\"MISSING_SECERT_KEY\"] = \"missing secret key\";\n    ERROR[\"MISSING_API_KEY\"] = \"missing api key\";\n    ERROR[\"UNEXPECTED_MESSAGE\"] = \"unexpected message\";\n})(ERROR = exports.ERROR || (exports.ERROR = {}));\nclass AlpacaWebsocket extends events_1.default.EventEmitter {\n    constructor(options) {\n        super();\n        this.msgpack = (0, msgpack5_1.default)();\n        this.session = {\n            apiKey: options.apiKey,\n            secretKey: options.secretKey,\n            subscriptions: options.subscriptions,\n            reconnect: true,\n            verbose: options.verbose,\n            backoff: true,\n            reconnectTimeout: 0,\n            maxReconnectTimeout: 30,\n            backoffIncrement: 0.5,\n            url: options.url,\n            currentState: STATE.WAITING_TO_CONNECT,\n            isReconnected: false,\n            pongWait: 5000,\n        };\n        if (this.session.apiKey.length === 0) {\n            throw new Error(ERROR.MISSING_API_KEY);\n        }\n        if (this.session.secretKey.length === 0) {\n            throw new Error(ERROR.MISSING_SECERT_KEY);\n        }\n        // Register internal event handlers\n        // Log and emit every state change\n        Object.values(STATE).forEach((s) => {\n            this.on(s, () => {\n                this.emit(EVENT.STATE_CHANGE, s);\n            });\n        });\n    }\n    connect() {\n        this.emit(STATE.CONNECTING);\n        this.session.currentState = STATE.CONNECTING;\n        this.resetSession();\n        this.conn = new ws_1.default(this.session.url, {\n            perMessageDeflate: {\n                serverNoContextTakeover: false,\n                clientNoContextTakeover: false,\n            },\n            headers: {\n                \"Content-Type\": \"application/msgpack\",\n            },\n        });\n        this.conn.binaryType = \"nodebuffer\";\n        this.conn.once(\"open\", () => this.authenticate());\n        this.conn.on(\"message\", (data) => {\n            this.handleMessage(this.msgpack.decode(data));\n        });\n        this.conn.on(\"error\", (err) => {\n            this.emit(EVENT.CLIENT_ERROR, err.message);\n            this.disconnect();\n        });\n        this.conn.on(\"close\", (code, msg) => {\n            this.log(`connection closed with code: ${code} and message: ${msg}`);\n            if (this.session.reconnect) {\n                this.reconnect();\n            }\n        });\n        this.conn.on(\"pong\", () => {\n            if (this.session.pongTimeout) {\n                clearTimeout(this.session.pongTimeout);\n            }\n        });\n        this.session.pingInterval = setInterval(() => {\n            this.ping();\n        }, 10000);\n    }\n    onConnect(fn) {\n        this.on(STATE.AUTHENTICATED, () => {\n            if (this.session.isReconnected) {\n                //if reconnected the user should subscribe to its symbols again\n                this.subscribeAll();\n            }\n            else {\n                fn();\n            }\n        });\n    }\n    reconnect() {\n        this.log(\"Reconnecting...\");\n        this.session.isReconnected = true;\n        const { backoff, backoffIncrement, maxReconnectTimeout } = this.session;\n        let reconnectTimeout = this.session.reconnectTimeout;\n        if (backoff) {\n            setTimeout(() => {\n                reconnectTimeout += backoffIncrement;\n                if (reconnectTimeout > maxReconnectTimeout) {\n                    reconnectTimeout = maxReconnectTimeout;\n                }\n                this.connect();\n            }, reconnectTimeout * 1000);\n            this.emit(STATE.WAITING_TO_RECONNECT, reconnectTimeout);\n        }\n    }\n    ping() {\n        this.conn.ping();\n        this.session.pongTimeout = setTimeout(() => {\n            this.log(\"no pong received from server, terminating...\");\n            this.conn.terminate();\n        }, this.session.pongWait);\n    }\n    authenticate() {\n        const authMsg = {\n            action: \"auth\",\n            key: this.session.apiKey,\n            secret: this.session.secretKey,\n        };\n        this.conn.send(this.msgpack.encode(authMsg));\n        this.emit(STATE.AUTHENTICATING);\n        this.session.currentState = STATE.AUTHENTICATING;\n    }\n    disconnect() {\n        this.emit(STATE.DISCONNECTED);\n        this.session.currentState = STATE.DISCONNECTED;\n        this.conn.close();\n        this.session.reconnect = false;\n        if (this.session.pongTimeout) {\n            clearTimeout(this.session.pongTimeout);\n        }\n        if (this.session.pingInterval) {\n            clearInterval(this.session.pingInterval);\n        }\n    }\n    onDisconnect(fn) {\n        this.on(STATE.DISCONNECTED, () => fn());\n    }\n    onError(fn) {\n        this.on(EVENT.CLIENT_ERROR, (err) => fn(err));\n    }\n    onStateChange(fn) {\n        this.on(EVENT.STATE_CHANGE, (newState) => fn(newState));\n    }\n    handleMessage(data) {\n        const msgType = (data === null || data === void 0 ? void 0 : data.length) ? data[0].T : \"\";\n        switch (msgType) {\n            case \"success\":\n                if (data[0].msg === \"connected\") {\n                    this.emit(STATE.CONNECTED);\n                    this.session.currentState = STATE.CONNECTED;\n                }\n                else if (data[0].msg === \"authenticated\") {\n                    this.emit(STATE.AUTHENTICATED);\n                    this.session.currentState = STATE.AUTHENTICATED;\n                }\n                break;\n            case \"subscription\":\n                this.updateSubscriptions(data[0]);\n                break;\n            case \"error\":\n                this.emit(EVENT.CLIENT_ERROR, exports.CONN_ERROR.get(data[0].code));\n                break;\n            default:\n                this.dataHandler(data);\n        }\n    }\n    log(msg) {\n        if (this.session.verbose) {\n            // eslint-disable-next-line no-console\n            console.log(msg);\n        }\n    }\n    getSubscriptions() {\n        return this.session.subscriptions;\n    }\n    resetSession() {\n        this.session.reconnect = true;\n        this.session.backoff = true;\n        this.session.reconnectTimeout = 0;\n        this.session.maxReconnectTimeout = 30;\n        this.session.backoffIncrement = 0.5;\n        if (this.session.pongTimeout) {\n            clearTimeout(this.session.pongTimeout);\n        }\n        if (this.session.pingInterval) {\n            clearInterval(this.session.pingInterval);\n        }\n    }\n}\nexports.AlpacaWebsocket = AlpacaWebsocket;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}