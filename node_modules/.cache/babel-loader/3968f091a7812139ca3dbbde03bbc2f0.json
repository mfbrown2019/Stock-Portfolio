{"ast":null,"code":"'use strict';\n\nconst Buffer = require('safe-buffer').Buffer;\n\nconst assert = require('assert');\n\nconst bl = require('bl');\n\nconst streams = require('./lib/streams');\n\nconst buildDecode = require('./lib/decoder');\n\nconst buildEncode = require('./lib/encoder');\n\nconst IncompleteBufferError = require('./lib/helpers.js').IncompleteBufferError;\n\nconst DateCodec = require('./lib/codecs/DateCodec');\n\nfunction msgpack(options) {\n  const encodingTypes = [];\n  const decodingTypes = new Map();\n  options = options || {\n    forceFloat64: false,\n    compatibilityMode: false,\n    // if true, skips encoding Dates using the msgpack\n    // timestamp ext format (-1)\n    disableTimestampEncoding: false,\n    preferMap: false,\n    // options.protoAction: 'error' (default) / 'remove' / 'ignore'\n    protoAction: 'error'\n  };\n  decodingTypes.set(DateCodec.type, DateCodec.decode);\n\n  if (!options.disableTimestampEncoding) {\n    encodingTypes.push(DateCodec);\n  }\n\n  function registerEncoder(check, encode) {\n    assert(check, 'must have an encode function');\n    assert(encode, 'must have an encode function');\n    encodingTypes.push({\n      check,\n      encode\n    });\n    return this;\n  }\n\n  function registerDecoder(type, decode) {\n    assert(type >= 0, 'must have a non-negative type');\n    assert(decode, 'must have a decode function');\n    decodingTypes.set(type, decode);\n    return this;\n  }\n\n  function register(type, constructor, encode, decode) {\n    assert(constructor, 'must have a constructor');\n    assert(encode, 'must have an encode function');\n    assert(type >= 0, 'must have a non-negative type');\n    assert(decode, 'must have a decode function');\n\n    function check(obj) {\n      return obj instanceof constructor;\n    }\n\n    function reEncode(obj) {\n      const buf = bl();\n      const header = Buffer.allocUnsafe(1);\n      header.writeInt8(type, 0);\n      buf.append(header);\n      buf.append(encode(obj));\n      return buf;\n    }\n\n    this.registerEncoder(check, reEncode);\n    this.registerDecoder(type, decode);\n    return this;\n  }\n\n  return {\n    encode: buildEncode(encodingTypes, options),\n    decode: buildDecode(decodingTypes, options),\n    register,\n    registerEncoder,\n    registerDecoder,\n    encoder: streams.encoder,\n    decoder: streams.decoder,\n    // needed for levelup support\n    buffer: true,\n    type: 'msgpack5',\n    IncompleteBufferError\n  };\n}\n\nmodule.exports = msgpack;","map":{"version":3,"names":["Buffer","require","assert","bl","streams","buildDecode","buildEncode","IncompleteBufferError","DateCodec","msgpack","options","encodingTypes","decodingTypes","Map","forceFloat64","compatibilityMode","disableTimestampEncoding","preferMap","protoAction","set","type","decode","push","registerEncoder","check","encode","registerDecoder","register","constructor","obj","reEncode","buf","header","allocUnsafe","writeInt8","append","encoder","decoder","buffer","module","exports"],"sources":["/Users/matthewbrown/Desktop/code/Summer/Stock-Portfolio/stock-portfolio/node_modules/msgpack5/index.js"],"sourcesContent":["'use strict'\n\nconst Buffer = require('safe-buffer').Buffer\nconst assert = require('assert')\nconst bl = require('bl')\nconst streams = require('./lib/streams')\nconst buildDecode = require('./lib/decoder')\nconst buildEncode = require('./lib/encoder')\nconst IncompleteBufferError = require('./lib/helpers.js').IncompleteBufferError\nconst DateCodec = require('./lib/codecs/DateCodec')\n\nfunction msgpack (options) {\n  const encodingTypes = []\n  const decodingTypes = new Map()\n\n  options = options || {\n    forceFloat64: false,\n    compatibilityMode: false,\n    // if true, skips encoding Dates using the msgpack\n    // timestamp ext format (-1)\n    disableTimestampEncoding: false,\n    preferMap: false,\n    // options.protoAction: 'error' (default) / 'remove' / 'ignore'\n    protoAction: 'error'\n  }\n\n  decodingTypes.set(DateCodec.type, DateCodec.decode)\n  if (!options.disableTimestampEncoding) {\n    encodingTypes.push(DateCodec)\n  }\n\n  function registerEncoder (check, encode) {\n    assert(check, 'must have an encode function')\n    assert(encode, 'must have an encode function')\n\n    encodingTypes.push({ check, encode })\n\n    return this\n  }\n\n  function registerDecoder (type, decode) {\n    assert(type >= 0, 'must have a non-negative type')\n    assert(decode, 'must have a decode function')\n    decodingTypes.set(type, decode)\n    return this\n  }\n\n  function register (type, constructor, encode, decode) {\n    assert(constructor, 'must have a constructor')\n    assert(encode, 'must have an encode function')\n    assert(type >= 0, 'must have a non-negative type')\n    assert(decode, 'must have a decode function')\n\n    function check (obj) {\n      return (obj instanceof constructor)\n    }\n\n    function reEncode (obj) {\n      const buf = bl()\n      const header = Buffer.allocUnsafe(1)\n\n      header.writeInt8(type, 0)\n\n      buf.append(header)\n      buf.append(encode(obj))\n\n      return buf\n    }\n\n    this.registerEncoder(check, reEncode)\n    this.registerDecoder(type, decode)\n\n    return this\n  }\n\n  return {\n    encode: buildEncode(encodingTypes, options),\n    decode: buildDecode(decodingTypes, options),\n    register,\n    registerEncoder,\n    registerDecoder,\n    encoder: streams.encoder,\n    decoder: streams.decoder,\n    // needed for levelup support\n    buffer: true,\n    type: 'msgpack5',\n    IncompleteBufferError\n  }\n}\n\nmodule.exports = msgpack\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}